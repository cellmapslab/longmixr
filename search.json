[{"path":"https://cellmapslab.github.io/longmixr/LICENSE.html","id":null,"dir":"","previous_headings":"","what":"GNU General Public License","title":"GNU General Public License","text":"Version 2, June 1991Copyright © 1989, 1991 Free Software Foundation, Inc.,51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA Everyone permitted copy distribute verbatim copies license document, changing allowed.","code":""},{"path":"https://cellmapslab.github.io/longmixr/LICENSE.html","id":"preamble","dir":"","previous_headings":"","what":"Preamble","title":"GNU General Public License","text":"licenses software designed take away freedom share change . contrast, GNU General Public License intended guarantee freedom share change free software–make sure software free users. General Public License applies Free Software Foundation’s software program whose authors commit using . (Free Software Foundation software covered GNU Lesser General Public License instead.) can apply programs, . speak free software, referring freedom, price. General Public Licenses designed make sure freedom distribute copies free software (charge service wish), receive source code can get want , can change software use pieces new free programs; know can things. protect rights, need make restrictions forbid anyone deny rights ask surrender rights. restrictions translate certain responsibilities distribute copies software, modify . example, distribute copies program, whether gratis fee, must give recipients rights . must make sure , , receive can get source code. must show terms know rights. protect rights two steps: (1) copyright software, (2) offer license gives legal permission copy, distribute /modify software. Also, author’s protection , want make certain everyone understands warranty free software. software modified someone else passed , want recipients know original, problems introduced others reflect original authors’ reputations. Finally, free program threatened constantly software patents. wish avoid danger redistributors free program individually obtain patent licenses, effect making program proprietary. prevent , made clear patent must licensed everyone’s free use licensed . precise terms conditions copying, distribution modification follow.","code":""},{"path":"https://cellmapslab.github.io/longmixr/LICENSE.html","id":"terms-and-conditions-for-copying-distribution-and-modification","dir":"","previous_headings":"","what":"TERMS AND CONDITIONS FOR COPYING, DISTRIBUTION AND MODIFICATION","title":"GNU General Public License","text":"0. License applies program work contains notice placed copyright holder saying may distributed terms General Public License. “Program”, , refers program work, “work based Program” means either Program derivative work copyright law: say, work containing Program portion , either verbatim modifications /translated another language. (Hereinafter, translation included without limitation term “modification”.) licensee addressed “”. Activities copying, distribution modification covered License; outside scope. act running Program restricted, output Program covered contents constitute work based Program (independent made running Program). Whether true depends Program . 1. may copy distribute verbatim copies Program’s source code receive , medium, provided conspicuously appropriately publish copy appropriate copyright notice disclaimer warranty; keep intact notices refer License absence warranty; give recipients Program copy License along Program. may charge fee physical act transferring copy, may option offer warranty protection exchange fee. 2. may modify copy copies Program portion , thus forming work based Program, copy distribute modifications work terms Section 1 , provided also meet conditions: ) must cause modified files carry prominent notices stating changed files date change. b) must cause work distribute publish, whole part contains derived Program part thereof, licensed whole charge third parties terms License. c) modified program normally reads commands interactively run, must cause , started running interactive use ordinary way, print display announcement including appropriate copyright notice notice warranty (else, saying provide warranty) users may redistribute program conditions, telling user view copy License. (Exception: Program interactive normally print announcement, work based Program required print announcement.) requirements apply modified work whole. identifiable sections work derived Program, can reasonably considered independent separate works , License, terms, apply sections distribute separate works. distribute sections part whole work based Program, distribution whole must terms License, whose permissions licensees extend entire whole, thus every part regardless wrote . Thus, intent section claim rights contest rights work written entirely ; rather, intent exercise right control distribution derivative collective works based Program. addition, mere aggregation another work based Program Program (work based Program) volume storage distribution medium bring work scope License. 3. may copy distribute Program (work based , Section 2) object code executable form terms Sections 1 2 provided also one following: ) Accompany complete corresponding machine-readable source code, must distributed terms Sections 1 2 medium customarily used software interchange; , b) Accompany written offer, valid least three years, give third party, charge cost physically performing source distribution, complete machine-readable copy corresponding source code, distributed terms Sections 1 2 medium customarily used software interchange; , c) Accompany information received offer distribute corresponding source code. (alternative allowed noncommercial distribution received program object code executable form offer, accord Subsection b .) source code work means preferred form work making modifications . executable work, complete source code means source code modules contains, plus associated interface definition files, plus scripts used control compilation installation executable. However, special exception, source code distributed need include anything normally distributed (either source binary form) major components (compiler, kernel, ) operating system executable runs, unless component accompanies executable. distribution executable object code made offering access copy designated place, offering equivalent access copy source code place counts distribution source code, even though third parties compelled copy source along object code. 4. may copy, modify, sublicense, distribute Program except expressly provided License. attempt otherwise copy, modify, sublicense distribute Program void, automatically terminate rights License. However, parties received copies, rights, License licenses terminated long parties remain full compliance. 5. required accept License, since signed . However, nothing else grants permission modify distribute Program derivative works. actions prohibited law accept License. Therefore, modifying distributing Program (work based Program), indicate acceptance License , terms conditions copying, distributing modifying Program works based . 6. time redistribute Program (work based Program), recipient automatically receives license original licensor copy, distribute modify Program subject terms conditions. may impose restrictions recipients’ exercise rights granted herein. responsible enforcing compliance third parties License. 7. , consequence court judgment allegation patent infringement reason (limited patent issues), conditions imposed (whether court order, agreement otherwise) contradict conditions License, excuse conditions License. distribute satisfy simultaneously obligations License pertinent obligations, consequence may distribute Program . example, patent license permit royalty-free redistribution Program receive copies directly indirectly , way satisfy License refrain entirely distribution Program. portion section held invalid unenforceable particular circumstance, balance section intended apply section whole intended apply circumstances. purpose section induce infringe patents property right claims contest validity claims; section sole purpose protecting integrity free software distribution system, implemented public license practices. Many people made generous contributions wide range software distributed system reliance consistent application system; author/donor decide willing distribute software system licensee impose choice. section intended make thoroughly clear believed consequence rest License. 8. distribution /use Program restricted certain countries either patents copyrighted interfaces, original copyright holder places Program License may add explicit geographical distribution limitation excluding countries, distribution permitted among countries thus excluded. case, License incorporates limitation written body License. 9. Free Software Foundation may publish revised /new versions General Public License time time. new versions similar spirit present version, may differ detail address new problems concerns. version given distinguishing version number. Program specifies version number License applies “later version”, option following terms conditions either version later version published Free Software Foundation. Program specify version number License, may choose version ever published Free Software Foundation. 10. wish incorporate parts Program free programs whose distribution conditions different, write author ask permission. software copyrighted Free Software Foundation, write Free Software Foundation; sometimes make exceptions . decision guided two goals preserving free status derivatives free software promoting sharing reuse software generally.","code":""},{"path":"https://cellmapslab.github.io/longmixr/LICENSE.html","id":"no-warranty","dir":"","previous_headings":"","what":"NO WARRANTY","title":"GNU General Public License","text":"11. PROGRAM LICENSED FREE CHARGE, WARRANTY PROGRAM, EXTENT PERMITTED APPLICABLE LAW. EXCEPT OTHERWISE STATED WRITING COPYRIGHT HOLDERS /PARTIES PROVIDE PROGRAM “” WITHOUT WARRANTY KIND, EITHER EXPRESSED IMPLIED, INCLUDING, LIMITED , IMPLIED WARRANTIES MERCHANTABILITY FITNESS PARTICULAR PURPOSE. ENTIRE RISK QUALITY PERFORMANCE PROGRAM . PROGRAM PROVE DEFECTIVE, ASSUME COST NECESSARY SERVICING, REPAIR CORRECTION. 12. EVENT UNLESS REQUIRED APPLICABLE LAW AGREED WRITING COPYRIGHT HOLDER, PARTY MAY MODIFY /REDISTRIBUTE PROGRAM PERMITTED , LIABLE DAMAGES, INCLUDING GENERAL, SPECIAL, INCIDENTAL CONSEQUENTIAL DAMAGES ARISING USE INABILITY USE PROGRAM (INCLUDING LIMITED LOSS DATA DATA RENDERED INACCURATE LOSSES SUSTAINED THIRD PARTIES FAILURE PROGRAM OPERATE PROGRAMS), EVEN HOLDER PARTY ADVISED POSSIBILITY DAMAGES. END TERMS CONDITIONS","code":""},{"path":"https://cellmapslab.github.io/longmixr/LICENSE.html","id":"how-to-apply-these-terms-to-your-new-programs","dir":"","previous_headings":"","what":"How to Apply These Terms to Your New Programs","title":"GNU General Public License","text":"develop new program, want greatest possible use public, best way achieve make free software everyone can redistribute change terms. , attach following notices program. safest attach start source file effectively convey exclusion warranty; file least “copyright” line pointer full notice found. Also add information contact electronic paper mail. program interactive, make output short notice like starts interactive mode: hypothetical commands show w show c show appropriate parts General Public License. course, commands use may called something show w show c; even mouse-clicks menu items–whatever suits program. also get employer (work programmer) school, , sign “copyright disclaimer” program, necessary. sample; alter names: General Public License permit incorporating program proprietary programs. program subroutine library, may consider useful permit linking proprietary applications library. want , use GNU Lesser General Public License instead License.","code":"<one line to give the program's name and a brief idea of what it does.> Copyright (C) <year>  <name of author>  This program is free software; you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation; either version 2 of the License, or (at your option) any later version.  This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more details.  You should have received a copy of the GNU General Public License along with this program; if not, write to the Free Software Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA. Gnomovision version 69, Copyright (C) year name of author Gnomovision comes with ABSOLUTELY NO WARRANTY; for details type `show w'. This is free software, and you are welcome to redistribute it under certain conditions; type `show c' for details. Yoyodyne, Inc., hereby disclaims all copyright interest in the program `Gnomovision' (which makes passes at compilers) written by James Hacker.  <signature of Ty Coon>, 1 April 1989 Ty Coon, President of Vice"},{"path":"https://cellmapslab.github.io/longmixr/articles/analysis_workflow.html","id":"introduction","dir":"Articles","previous_headings":"","what":"Introduction","title":"Example clustering analysis","text":"vignette gives overview inspect prepare data clustering analysis longmixr, clustering analyze results.","code":""},{"path":"https://cellmapslab.github.io/longmixr/articles/analysis_workflow.html","id":"consensus-clustering","dir":"Articles","previous_headings":"","what":"Consensus clustering","title":"Example clustering analysis","text":"Consensus clustering tries generate robust clustering results. Instead clustering , clustering performed several times different subsets data. every subset, pairs subjects recorded cluster together cluster. average information called consensus matrix. final clustering solution obtained hierarchical clustering step using consensus matrix distance matrix. overview used consensus clustering methodology, see Monti, Stefano, et al. “Consensus clustering: resampling-based method class discovery visualization gene expression microarray data.” Machine learning 52.1 (2003): 91-118. code provided visualizations longmixr based ConsensusClusterPlus package, Wilkerson, Matthew D., D. Neil Hayes. “ConsensusClusterPlus: class discovery tool confidence assessments item tracking.” Bioinformatics 26.12 (2010): 1572-1573. contrast ConsensusClusterPlus, use package flexmix, Grün, Bettina, Friedrich Leisch. “FlexMix version 2: finite mixtures concomitant variables varying constant parameters.” (2008): 1., instead hierarchical clustering allows us model longitudinal data.","code":""},{"path":"https://cellmapslab.github.io/longmixr/articles/analysis_workflow.html","id":"data","dir":"Articles","previous_headings":"","what":"Data","title":"Example clustering analysis","text":"analysis, use simulated data set contained longmixr. Please note longmixr can deal complete data sets. data set contains observations 100 subjects four different time points. data simulated two groups try recover analysis. every individual, information age first time point questionnaire contains five items (words variables) categorical levels 1 - 5 questionnaire B contains five items (words variables) categorical levels 1 - 5 questionnaire C contains five continuous variables one additional cross-sectional continuous variable data set simulated, also contains group variable simulation. data set typically don’t variable don’t know groups. following analysis, group variable required.","code":"data(\"fake_questionnaire_data\") str(fake_questionnaire_data) #> 'data.frame':    400 obs. of  20 variables: #>  $ ID                        : chr  \"person_1\" \"person_1\" \"person_1\" \"person_1\" ... #>  $ visit                     : int  1 2 3 4 1 2 3 4 1 2 ... #>  $ group                     : Factor w/ 2 levels \"A\",\"B\": 1 1 1 1 1 1 1 1 1 1 ... #>  $ age_visit_1               : num  19 19 19 19 32 32 32 32 20 20 ... #>  $ single_continuous_variable: num  1.18 1.18 1.18 1.18 0.81 ... #>  $ questionnaire_A_1         : Factor w/ 5 levels \"1\",\"2\",\"3\",\"4\",..: 2 2 3 3 2 2 3 4 2 2 ... #>  $ questionnaire_A_2         : Factor w/ 5 levels \"1\",\"2\",\"3\",\"4\",..: 2 2 1 1 2 2 1 1 2 2 ... #>  $ questionnaire_A_3         : Factor w/ 5 levels \"1\",\"2\",\"3\",\"4\",..: 2 2 1 1 3 2 1 1 2 1 ... #>  $ questionnaire_A_4         : Factor w/ 5 levels \"1\",\"2\",\"3\",\"4\",..: 2 1 1 2 2 2 1 1 2 2 ... #>  $ questionnaire_A_5         : Factor w/ 5 levels \"1\",\"2\",\"3\",\"4\",..: 2 4 4 5 3 4 5 5 1 3 ... #>  $ questionnaire_B_1         : Factor w/ 5 levels \"1\",\"2\",\"3\",\"4\",..: 1 2 4 5 2 3 4 5 1 3 ... #>  $ questionnaire_B_2         : Factor w/ 5 levels \"1\",\"2\",\"3\",\"4\",..: 1 1 2 4 1 2 4 5 1 2 ... #>  $ questionnaire_B_3         : Factor w/ 5 levels \"1\",\"2\",\"3\",\"4\",..: 1 1 2 1 2 2 2 2 2 2 ... #>  $ questionnaire_B_4         : Factor w/ 5 levels \"1\",\"2\",\"3\",\"4\",..: 1 1 1 1 1 2 2 1 1 1 ... #>  $ questionnaire_B_5         : Factor w/ 5 levels \"1\",\"2\",\"3\",\"4\",..: 1 2 1 1 1 4 2 3 1 1 ... #>  $ questionnaire_C_1         : num  0.973 0.351 -3.715 -2.059 0.831 ... #>  $ questionnaire_C_2         : num  -1.974 0.852 6.147 6.211 -3.231 ... #>  $ questionnaire_C_3         : num  0.873 1.168 1.864 3.84 -0.34 ... #>  $ questionnaire_C_4         : num  3.41 4.24 8.9 13.81 3.93 ... #>  $ questionnaire_C_5         : num  0.264 1.586 0.459 1.747 1.866 ..."},{"path":"https://cellmapslab.github.io/longmixr/articles/analysis_workflow.html","id":"overview","dir":"Articles","previous_headings":"Data","what":"Overview","title":"Example clustering analysis","text":"recommended first get overview data distribution: Age:  histogram shows clear pattern age distribution. Questionnaire :  five items questionnaire, distribution different levels (counts) shown four time points. distribution levels seems change across time points items. Questionnaire B:  five items questionnaire, distribution different levels (counts) shown four time points. distribution levels seems change across time points items. Questionnaire C:  five variables questionnaire, distribution shown four time points boxplots. distribution changes variables across time points. single_continuous_variable:  distribution variable shown boxplot.","code":"fake_questionnaire_data %>%    filter(visit == 1) %>%    ggplot(aes(x = age_visit_1)) +   geom_histogram() +   theme_bw() #> `stat_bin()` using `bins = 30`. Pick better value with `binwidth`. fake_questionnaire_data %>%    mutate(visit = as.factor(visit)) %>%    select(visit, starts_with(\"questionnaire_A\")) %>%    pivot_longer(     cols = -visit,     names_to = \"item\",     values_to = \"level\"   ) %>%    ggplot(aes(x = visit, fill = level)) +   geom_bar() +   theme_bw() +   facet_wrap(~item) fake_questionnaire_data %>%    mutate(visit = as.factor(visit)) %>%    select(visit, starts_with(\"questionnaire_B\")) %>%    pivot_longer(     cols = -visit,     names_to = \"item\",     values_to = \"level\"   ) %>%    ggplot(aes(x = visit, fill = level)) +   geom_bar() +   theme_bw() +   facet_wrap(~item) fake_questionnaire_data %>%    mutate(visit = as.factor(visit)) %>%    select(visit, starts_with(\"questionnaire_C\")) %>%    pivot_longer(     cols = -visit,     names_to = \"variable\",     values_to = \"value\"   ) %>%    ggplot(aes(x = visit, y = value, fill = visit)) +   geom_boxplot() +   theme_bw() +   facet_wrap(~variable) fake_questionnaire_data %>%   # only use the values from the first visit as there is only one unique value   # per subject   filter(visit == 1) %>%    ggplot(aes(y = single_continuous_variable)) +   geom_boxplot() +   theme_bw() +   theme(axis.ticks.x = element_blank(),         axis.text.x = element_blank())"},{"path":"https://cellmapslab.github.io/longmixr/articles/analysis_workflow.html","id":"dimension-reduction","dir":"Articles","previous_headings":"","what":"Dimension reduction","title":"Example clustering analysis","text":"Especially lot variables, can make sense reduce dimensionality analysis. demonstration purposes, apply dimension reduction approach also example data. , use function FAMD package FactoMineR. uses similar approach PCA categorical data. better interpretability, apply dimension reduction per questionnaire. can use elbow plot method visually determine number components include analysis. following function plots variance explained component.  case, select first three components others explain small amount variance.  questionnaire B, include first component.  Questionnaire C, include first component. Generate one data.frame use values every individual new dimension reduced space:","code":"quest_A_dim <- fake_questionnaire_data %>%    select(starts_with(\"questionnaire_A\")) %>%    FAMD(ncp = 5, graph = FALSE)  quest_B_dim <- fake_questionnaire_data %>%    select(starts_with(\"questionnaire_B\")) %>%    FAMD(ncp = 5, graph = FALSE)  quest_C_dim <- fake_questionnaire_data %>%    select(starts_with(\"questionnaire_C\")) %>%    prcomp(scale = TRUE) fviz_screeplot(quest_A_dim, main = \"Questionnaire A\") fviz_screeplot(quest_B_dim, main = \"Questionnaire B\") fviz_screeplot(quest_C_dim, main = \"Questionnaire C\") quest_A_comp <- as.data.frame(quest_A_dim$ind$coord[, 1:3]) colnames(quest_A_comp) <- paste0(\"quest_A_\", 1:3) quest_B_comp <- as.data.frame(quest_B_dim$ind$coord[, 1]) colnames(quest_B_comp) <- paste0(\"quest_B_\", 1) quest_C_comp <- as.data.frame(quest_C_dim$x[, 1]) colnames(quest_C_comp) <- paste0(\"quest_C_\", 1)  cluster_data <- bind_cols(   data.frame(     ID = fake_questionnaire_data$ID,     visit = fake_questionnaire_data$visit,     age = fake_questionnaire_data$age_visit_1   ),   quest_A_comp,   quest_B_comp,   quest_C_comp )"},{"path":"https://cellmapslab.github.io/longmixr/articles/analysis_workflow.html","id":"variable-importance","dir":"Articles","previous_headings":"Dimension reduction","what":"Variable importance","title":"Example clustering analysis","text":"can check well variables correlated components variables contribute components found dimension reduction step. visualization, use functions factoextra package. Questionnaire :     Questionnaire B:   Questionnaire C:","code":"fviz_famd_var(quest_A_dim, repel = TRUE) fviz_contrib(quest_A_dim, \"var\", axes = 1) fviz_contrib(quest_A_dim, \"var\", axes = 2) fviz_contrib(quest_A_dim, \"var\", axes = 3) fviz_famd_var(quest_B_dim, repel = TRUE) fviz_contrib(quest_B_dim, \"var\", axes = 1) fviz_pca_var(quest_C_dim, repel = TRUE) fviz_contrib(quest_C_dim, \"var\", axes = 1)"},{"path":"https://cellmapslab.github.io/longmixr/articles/analysis_workflow.html","id":"effect-of-confounders","dir":"Articles","previous_headings":"","what":"Effect of confounders","title":"Example clustering analysis","text":"can confounders known effect outcome don’t want analyze. One solution first “regress ” linear model work resulting residuals. following steps done components dimension reduction. One example age effect questionnaire :  simple approach use linear mixed models regress age effect components used clustering: regression, linear effect age contained anymore residuals.","code":"ggplot(cluster_data, aes(x = age, y = quest_A_1)) +   geom_point() +   geom_smooth(method = \"lm\") +   ylab(\"Questionnaire A dimension 1\") +   theme_bw() #> `geom_smooth()` using formula 'y ~ x' # helper function to regress out the effect generate_residuals <- function(x, age, ID) {   data <- data.frame(     x = x,     age = age,     ID = ID)   model <- lmer(x ~ age + (1 | ID), data = data)   resid <- residuals(model, type = \"response\")   names(resid) <- NULL   resid }  cluster_data_resid <- cluster_data %>%    # apply the function to all variables ending with a number   mutate(across(matches(\"[1-9]$\"),                 ~generate_residuals(x = .x, age = age, ID = ID),                 .names = \"{.col}_resid\")) %>%    select(ID, visit, ends_with(\"resid\"), age) #> boundary (singular) fit: see ?isSingular #> boundary (singular) fit: see ?isSingular #> boundary (singular) fit: see ?isSingular ggplot(cluster_data_resid, aes(x = age, y = quest_A_1_resid)) +   geom_point() +   geom_smooth(method = \"lm\") +   ylab(\"Residuals of questionnaire A dimension 1\") +   theme_bw() #> `geom_smooth()` using formula 'y ~ x'"},{"path":"https://cellmapslab.github.io/longmixr/articles/analysis_workflow.html","id":"clustering","dir":"Articles","previous_headings":"","what":"Clustering","title":"Example clustering analysis","text":"First need set models estimated used assign observation cluster. every variable, one model estimated. First define names variables. case, components derived questionnaires adjusted age effect: Now, every variable FLXMRmgcv model set accommodates longitudinal structure data. However, flexmix framework flexible model can changed FLXMR model. ~ . part means actual model (outcome modeled independent variables) yet defined. defined argument longitudinal_consensus_cluster function. use function following parameters: data = cluster_data_resid data data.frame observations rows variables columns. id_column = ID defines variable provided data ID column correctly name output. max_k = 3 maximum number clusters tried ; case solutions 2 3 clusters tried . set argument high expect optimal solution . Using higher max_k increases computational cost. reps = 5 number often data subsetted clustering repeated (words: number subsets). , use small number keep run time short example, general higher number accurate results. p_item = 0.8 fraction observations included subset (definition subset see reps description). model_list = list_models predefined flexmix models used clustering. flexmix_formula = .formula(\"~s(visit, k = 4) | ID\") formula response modeled; outcome modeled smooth function time taking repeated measurements one subject account. final_linkage = \"ward.D2\" linkage used final hierarchical clustering step consensus matrix.","code":"response_names <- c(paste0(\"quest_A_\", 1:3, \"_resid\"),                     paste0(\"quest_B_\", 1, \"_resid\"),                     paste0(\"quest_C_\", 1, \"_resid\")) list_models <- lapply(response_names, function(x) {   flexmix::FLXMRmgcv(as.formula(paste0(x, \" ~ .\"))) }) set.seed(2378) cluster_model <- longitudinal_consensus_cluster(data = cluster_data_resid,                                                 id_column = \"ID\",                                                 max_k = 3,                                                 reps = 5,                                                 p_item = 0.8,                                                 model_list = list_models,                                                 flexmix_formula = as.formula(\"~s(visit, k = 4) | ID\"),                                                 final_linkage = \"ward.D2\") #> 2 : * #> 3 : * #> 2 : * #> 3 : * #> 2 : * #> 3 : * #> 2 : * #> 3 : * #> 2 : * #> 3 : *"},{"path":[]},{"path":"https://cellmapslab.github.io/longmixr/articles/analysis_workflow.html","id":"determine-the-best-clustering","dir":"Articles","previous_headings":"Analyze the clustering","what":"Determine the best clustering","title":"Example clustering analysis","text":"First, plot analysis plots provided longmixr. provided ConsensusClusterPlus package basis longmixr:  Especially useful consensus matrix plots item-consensus plot. consensus matrix plot shows every pair subjects/IDs often clustered together one cluster. Every row every column represents one subject. value 1 (dark blue) means two subjects always cluster together, value 0 (white) means two subjects never cluster together. first plot shows legend consensus matrix plots without information. optimal solution, want see clearly separated clusters dark blue. example, case two cluster solution less three cluster solution. consensus matrix plots also mention “median flexmix clusters”. cases, flexmix model find many clusters specified less. get short overview , include median number clusters. detailed analysis, information found number clusters contained return value every cluster solution found_flexmix_clusters. consensus cumulative distribution function (CDF) plot, optimal cases shows straight horizontal line sharp increase 0 1. example, fulfilled two cluster solution three cluster solution. However, sharp increase 0 visible example. Delta area plot generated consistent ConsensusClusterPlus, don’t recommend use . tracking plot shows every subject cluster assigned across different possible cluster solutions different numbers clusters. item-consensus plot shows every item (subject) x-axis. every subject, mean consensus value subjects assigned one cluster calculated. item-consensus plot two clusters, mean item consensus subjects assigned cluster 1 calculated cluster 1, subject assigned cluster 2. Accordingly, mean item consensus subjects assigned cluster 2 calculated cluster 2, subject assigned cluster 1. item-consensus plot three clusters, subjects assigned different clusters different subsampling steps. Therefore, items mean item-consensus shown cluster 2 cluster 3. general, given subject want high item-consensus one cluster low item-consensus clusters. example, item-consensus plots suggest two cluster solution fits data best.","code":"plot(cluster_model)"},{"path":"https://cellmapslab.github.io/longmixr/articles/analysis_workflow.html","id":"visualize-the-clusters","dir":"Articles","previous_headings":"Analyze the clustering","what":"Visualize the clusters","title":"Example clustering analysis","text":"First extract cluster information (two cluster solution) model: extracted assignments data.frame also includes ID column name specified user longitudinal_consensus_cluster function, can easily join original data:","code":"cluster_assignments <- get_clusters(cluster_model, number_clusters = 2) original_data <- fake_questionnaire_data %>%    left_join(cluster_assignments, by = \"ID\") cluster_data_resid <- cluster_data_resid %>%    left_join(cluster_assignments, by = \"ID\")"},{"path":"https://cellmapslab.github.io/longmixr/articles/analysis_workflow.html","id":"components-used-in-clustering","dir":"Articles","previous_headings":"Analyze the clustering > Visualize the clusters","what":"Components used in clustering","title":"Example clustering analysis","text":"Now components used clustering can visualized spaghetti plots. First, define plotting function: Questionnaire :  Questionnaire B:  Questionnaire C:","code":"plot_spaghetti <- function(data = cluster_data_resid,                            num_clus = 2,                            var_type = c(\"quest_A\", \"quest_B\", \"quest_C\"),                            var_nums = 1:3,                            scale_arg = \"fixed\") {   var_type <- match.arg(var_type)   clus_assign <- paste0(\"assignment_num_clus_\", num_clus)      plot_data <- data %>%      pivot_longer(       cols = paste0(var_type, \"_\", var_nums, \"_resid\"),       names_to = \"variable\"     ) %>%      # this step to create a patient_idID per variable is needed, otherwise     # ggplot can't differentiate between the different variables     mutate(ID = paste0(ID, \"_\", variable),            across(c(visit, variable, ID), as.factor))      additional_data <- plot_data %>%      select(visit, value, variable, .data[[clus_assign]]) %>%      group_by(visit, variable, .data[[clus_assign]]) %>%      summarise(mean = mean(value),               sd = sd(value)) %>%      mutate(ID = 1)      ggplot(data = plot_data) +     geom_line(mapping = aes(x = visit, y = value, col = variable, group = ID),               alpha = 0.4) +     geom_ribbon(data = additional_data,                 mapping = aes(x = visit, y = mean, ymin = mean - sd, ymax = mean + sd,                               fill = variable, group = variable), alpha = 0.3) +     geom_line(data = additional_data,               mapping = aes(x = visit, y = mean, col = variable, group = variable),               size = 2) +     facet_wrap(~as.factor(.data[[clus_assign]]), scales = scale_arg) +     theme_bw() } plot_spaghetti(num_clus = 2, var_type = \"quest_A\", var_nums = 1:3) plot_spaghetti(num_clus = 2, var_type = \"quest_B\", var_nums = 1) plot_spaghetti(num_clus = 2, var_type = \"quest_C\", var_nums = 1)"},{"path":"https://cellmapslab.github.io/longmixr/articles/analysis_workflow.html","id":"original-data","dir":"Articles","previous_headings":"Analyze the clustering > Visualize the clusters","what":"Original data","title":"Example clustering analysis","text":"original variables categorical variables. better visualization change time, use alluvial plots plot every item (variable) separately. Define plotting function alluvial plots: Questionnaire :  Questionnaire B:  Questionnaire C: questionnaire C contains continuous variables, use spaghetti plot:  comparison two clusters regarding original variables show differences items categorical questionnaires variables continuous questionnaires differ two clusters.","code":"plot_alluvial <- function(data = original_data,                           num_clus = 2,                           var_name) {   clus_assign <- paste0(\"assignment_num_clus_\", num_clus)      p <- data %>%      ggplot(aes(x = visit,                stratum = .data[[var_name]],                alluvium = ID,                fill = .data[[var_name]],                label = .data[[var_name]])) +     scale_fill_brewer(type = \"qual\", palette = \"Set2\") +     geom_flow(stat = \"alluvium\", lode.guidance = \"frontback\",               color = \"darkgray\") +geom_stratum() +     facet_wrap(~as.factor(.data[[clus_assign]])) +     theme_bw() +     theme(legend.position = \"bottom\") +     ylab(\"number of subjects\") +     ggtitle(paste0(\"Distribution of \", var_name, \" across clusters\"))      print(p) } colnames(original_data)[grepl(\"^questionnaire_A\", colnames(original_data))] %>%    walk(~plot_alluvial(num_clus = 2, var_name = .x)) colnames(original_data)[grepl(\"^questionnaire_B\", colnames(original_data))] %>%    walk(~plot_alluvial(num_clus = 2, var_name = .x)) # first define plot function similar to the first spaghetti plot function but # suited for the original data plot_spaghetti_2 <- function(data,                              var_name,                              num_clus = 2,                              scale_arg = \"fixed\") {      clus_assign <- paste0(\"assignment_num_clus_\", num_clus)   plot_data <- data %>%      pivot_longer(       cols = all_of(var_name),       names_to = \"variable\"     ) %>%      # this step to create a ID per variable is needed, otherwise     # ggplot can't differentiate between the different variables     mutate(ID = paste0(ID, \"_\", variable),            across(c(visit, variable, ID), as.factor))      additional_data <- plot_data %>%      select(visit, value, variable, .data[[clus_assign]]) %>%      group_by(visit, variable, .data[[clus_assign]]) %>%      summarise(mean = mean(value, na.rm = TRUE),               sd = sd(value, na.rm = TRUE)) %>%      mutate(ID = 1)      p <- ggplot(data = plot_data) +     geom_line(mapping = aes(x = visit, y = value, col = variable, group = ID),               alpha = 0.4) +     geom_ribbon(data = additional_data,                 mapping = aes(x = visit, y = mean, ymin = mean - sd, ymax = mean + sd,                               fill = variable, group = variable), alpha = 0.3) +     geom_line(data = additional_data,               mapping = aes(x = visit, y = mean, col = variable, group = variable),               size = 2) +     facet_wrap(~as.factor(.data[[clus_assign]]), scales = scale_arg) +     theme_bw()      plot(p) } colnames(original_data)[grepl(\"^questionnaire_C\", colnames(original_data))] %>%    walk(~plot_spaghetti_2(num_clus = 2, data = original_data, var_name = .x))"},{"path":"https://cellmapslab.github.io/longmixr/articles/analysis_workflow.html","id":"cluster-comparison","dir":"Articles","previous_headings":"Analyze the clustering > Visualize the clusters","what":"Cluster comparison","title":"Example clustering analysis","text":"final step, variables used clustering, example cross-sectional variables, can compared across found clusters. case, single_continuous_variable one value per subject left clustering:  Also left-variable shows different behavior two clusters.","code":"original_data %>%    filter(visit == 1) %>%    mutate(cluster = as.factor(assignment_num_clus_2)) %>%    ggplot(aes(x = cluster, y = single_continuous_variable,              fill = cluster)) +   geom_boxplot() +   theme_bw()"},{"path":"https://cellmapslab.github.io/longmixr/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Jonas Hagenberg. Author, maintainer. Matt Wilkerson. Author, copyright holder. Peter Waltman. Author, copyright holder. Max Planck Institute Psychiatry. Copyright holder.","code":""},{"path":"https://cellmapslab.github.io/longmixr/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Hagenberg J, Wilkerson M, Waltman P (2022). longmixr: Longitudinal Consensus Clustering 'flexmix'. R package version 1.0.0, https://cellmapslab.github.io/longmixr/.","code":"@Manual{,   title = {longmixr: Longitudinal Consensus Clustering with 'flexmix'},   author = {Jonas Hagenberg and Matt Wilkerson and Peter Waltman},   year = {2022},   note = {R package version 1.0.0},   url = {https://cellmapslab.github.io/longmixr/}, }"},{"path":"https://cellmapslab.github.io/longmixr/index.html","id":"longmixr","dir":"","previous_headings":"","what":"Longitudinal Consensus Clustering with flexmix","title":"Longitudinal Consensus Clustering with flexmix","text":"goal longmixr provide consensus clustering longitudinal clustering performed flexmix. uses approach ConsensusClusterPlus replaces clustering longitudinal data flexmix model.","code":""},{"path":"https://cellmapslab.github.io/longmixr/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"Longitudinal Consensus Clustering with flexmix","text":"can install longmixr github : want render vignette, use: Please note vignette lot dependencies installed.","code":"remotes::install_github(\"cellmapslab/longmixr\") remotes::install_github(\"cellmapslab/longmixr\", build_vignettes = TRUE, dependencies = TRUE)"},{"path":"https://cellmapslab.github.io/longmixr/index.html","id":"basic-usage","dir":"","previous_headings":"","what":"Basic usage","title":"Longitudinal Consensus Clustering with flexmix","text":"need dataset column identifies subject, column denotes time point measurement variables want model. following approach, variables var_1 var_2 modeled dependent smooth function time, taking multiple measurements subject account. assumption var_1 var_2 represent multivariate outcome. modeling specified flexmix drivers flexmix_formula: results clustering can assessed via several plots. every specified number clusters, consensus matrix resulting hierarchical clustering matrix shown. Additionally, consensus CDF delta Area plots give measure number cluster optimal. tracking plot gives overview observations distributed across different clusters different numbers specified clusters. item (subject) consensus plot shows average consensus subject subjects belong one cluster. cluster consensus plot depicts average consensus members cluster. mentioned plots generated calling plot function:","code":"set.seed(5) test_data <- data.frame(   patient_id = rep(1:10, each = 4),   visit = rep(1:4, 10),   var_1 = c(rnorm(20, -1), rnorm(20, 3)) + rep(seq(from = 0, to = 1.5, length.out = 4), 10),   var_2 = c(rnorm(20, 0.5, 1.5), rnorm(20, -2, 0.3)) + rep(seq(from = 1.5, to = 0, length.out = 4), 10) ) model_list <- list(flexmix::FLXMRmgcv(as.formula(\"var_1 ~ .\")),                    flexmix::FLXMRmgcv(as.formula(\"var_2 ~ .\"))) clustering <- longitudinal_consensus_cluster(   data = test_data,   id_column = \"patient_id\",   max_k = 2,   reps = 3,   model_list = model_list,   flexmix_formula = as.formula(\"~s(visit, k = 4) | patient_id\")) plot(clustering)"},{"path":"https://cellmapslab.github.io/longmixr/index.html","id":"detailed-explanation","dir":"","previous_headings":"Basic usage","what":"Detailed explanation","title":"Longitudinal Consensus Clustering with flexmix","text":"detailed explanation can use longmixr analyze longitudinal data, check Example clustering analysis vignette.","code":""},{"path":"https://cellmapslab.github.io/longmixr/index.html","id":"cross-sectional-clustering","dir":"","previous_headings":"","what":"Cross-sectional clustering","title":"Longitudinal Consensus Clustering with flexmix","text":"Additionally, package provides wrapper function around ConsensusClusterPlus function work mixed continuous categorical data (using Gower distance):","code":"dc <- mtcars # scale continuous variables dc <- sapply(mtcars[, 1:7], scale) # code factor variables dc <- cbind(as.data.frame(dc),             vs = as.factor(mtcars$vs),             am = as.factor(mtcars$am),             gear = as.factor(mtcars$gear),             carb = as.factor(mtcars$carb)) cc <- crosssectional_consensus_cluster(   data = dc,   reps = 10,   seed = 1 )"},{"path":"https://cellmapslab.github.io/longmixr/index.html","id":"copyright","dir":"","previous_headings":"","what":"Copyright","title":"Longitudinal Consensus Clustering with flexmix","text":"package based code ConsensusClusterPlus (version 1.52.0). code copyright holders Matt Wilkerson Peter Waltman. subsequent changes copyright holder Max Planck Institute Psychiatry. code licensed GPL v2.","code":""},{"path":"https://cellmapslab.github.io/longmixr/reference/crosssectional_consensus_cluster.html","id":null,"dir":"Reference","previous_headings":"","what":"Cross-sectional clustering with categorical variables — crosssectional_consensus_cluster","title":"Cross-sectional clustering with categorical variables — crosssectional_consensus_cluster","text":"function uses ConsensusClusterPlus function package name defaults clustering data categorical variables. distance function, Gower distance used.","code":""},{"path":"https://cellmapslab.github.io/longmixr/reference/crosssectional_consensus_cluster.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Cross-sectional clustering with categorical variables — crosssectional_consensus_cluster","text":"","code":"crosssectional_consensus_cluster(   data,   reps = 1000,   finalLinkage = \"ward.D2\",   innerLinkage = \"ward.D2\",   ... )"},{"path":"https://cellmapslab.github.io/longmixr/reference/crosssectional_consensus_cluster.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Cross-sectional clustering with categorical variables — crosssectional_consensus_cluster","text":"data matrix data.frame containing variables used computing distance. argument passed StatMatch::gower.dist reps number repetitions, ConsensusClusterPlus finalLinkage linkage method final clustering, ConsensusClusterPlussame ConsensusClusterPlus innerLinkage linkage method clustering steps, ConsensusClusterPlus ... arguments passed ConsensusClusterPlus, attention: d argument can set directly computed crosssectional_consensus_cluster","code":""},{"path":"https://cellmapslab.github.io/longmixr/reference/crosssectional_consensus_cluster.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Cross-sectional clustering with categorical variables — crosssectional_consensus_cluster","text":"output produced ConsensusClusterPlus","code":""},{"path":"https://cellmapslab.github.io/longmixr/reference/crosssectional_consensus_cluster.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Cross-sectional clustering with categorical variables — crosssectional_consensus_cluster","text":"data can take input data types gower.dist can handle, .e. numeric, character/factor, ordered logical.","code":""},{"path":"https://cellmapslab.github.io/longmixr/reference/crosssectional_consensus_cluster.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Cross-sectional clustering with categorical variables — crosssectional_consensus_cluster","text":"","code":"dc <- mtcars # scale continuous variables dc <- sapply(mtcars[, 1:7], scale) # code factor variables dc <- cbind(as.data.frame(dc),             vs = as.factor(mtcars$vs),             am = as.factor(mtcars$am),             gear = as.factor(mtcars$gear),             carb = as.factor(mtcars$carb)) cc <- crosssectional_consensus_cluster(   data = dc,   reps = 10,   seed = 1 ) #> end fraction #> clustered  #> clustered"},{"path":"https://cellmapslab.github.io/longmixr/reference/fake_questionnaire_data.html","id":null,"dir":"Reference","previous_headings":"","what":"Fake questionnaire data — fake_questionnaire_data","title":"Fake questionnaire data — fake_questionnaire_data","text":"simulated data set containing observations 100 individuals four time points. data simulated two groups (50 individuals ) contains two questionnaires five items , one questionnaire five continuous variables one additional cross-sectional continuous variable. data set group variable simulation included. typically group variable data.","code":""},{"path":"https://cellmapslab.github.io/longmixr/reference/fake_questionnaire_data.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Fake questionnaire data — fake_questionnaire_data","text":"","code":"fake_questionnaire_data"},{"path":"https://cellmapslab.github.io/longmixr/reference/fake_questionnaire_data.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Fake questionnaire data — fake_questionnaire_data","text":"data frame 400 rows 20 variables: ID patient ID visit time point observation group simulated group observation belongs age_visit_1 age patient time point 1 single_continuous_variable cross-sectional continuous variable, .e. one unique value per individual questionnaire_A_1 first item questionnaire categories 1 5 questionnaire_A_2 second item questionnaire categories 1 5 questionnaire_A_3 third item questionnaire categories 1 5 questionnaire_A_4 fourth item questionnaire categories 1 5 questionnaire_A_5 fifth item questionnaire categories 1 5 questionnaire_B_1 first item questionnaire B categories 1 5 questionnaire_B_2 second item questionnaire B categories 1 5 questionnaire_B_3 third item questionnaire B categories 1 5 questionnaire_B_4 fourth item questionnaire B categories 1 5 questionnaire_B_5 fifth item questionnaire B categories 1 5 questionnaire_C_1 first continuous variable questionnaire C questionnaire_C_2 second continuous variable questionnaire C questionnaire_C_3 third continuous variable questionnaire C questionnaire_C_4 fourth continuous variable questionnaire C questionnaire_C_5 fifth continuous variable questionnaire C","code":""},{"path":"https://cellmapslab.github.io/longmixr/reference/fake_questionnaire_data.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"Fake questionnaire data — fake_questionnaire_data","text":"simulated data","code":""},{"path":"https://cellmapslab.github.io/longmixr/reference/get_clusters.html","id":null,"dir":"Reference","previous_headings":"","what":"Extract the cluster assignments — get_clusters","title":"Extract the cluster assignments — get_clusters","text":"functions extracts cluster assignments lcc object. One can specify number clusters assignments returned.","code":""},{"path":"https://cellmapslab.github.io/longmixr/reference/get_clusters.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Extract the cluster assignments — get_clusters","text":"","code":"get_clusters(cluster_solution, number_clusters = NULL)"},{"path":"https://cellmapslab.github.io/longmixr/reference/get_clusters.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Extract the cluster assignments — get_clusters","text":"cluster_solution lcc object number_clusters default NULL return assignments. Otherwise specify numeric vector number clusters assignments returned, e.g. 2:4","code":""},{"path":"https://cellmapslab.github.io/longmixr/reference/get_clusters.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Extract the cluster assignments — get_clusters","text":"data.frame ID column (name ID column specified user calling longitudinal_consensus_cluster) function one column cluster assignments every specified number clusters. assignments included number_clusters returned form columns names assignment_num_clus_x","code":""},{"path":"https://cellmapslab.github.io/longmixr/reference/get_clusters.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Extract the cluster assignments — get_clusters","text":"","code":"# not run set.seed(5) test_data <- data.frame(patient_id = rep(1:10, each = 4), visit = rep(1:4, 10), var_1 = c(rnorm(20, -1), rnorm(20, 3)) + rep(seq(from = 0, to = 1.5, length.out = 4), 10), var_2 = c(rnorm(20, 0.5, 1.5), rnorm(20, -2, 0.3)) + rep(seq(from = 1.5, to = 0, length.out = 4), 10)) model_list <- list(flexmix::FLXMRmgcv(as.formula(\"var_1 ~ .\")), flexmix::FLXMRmgcv(as.formula(\"var_2 ~ .\"))) clustering <- longitudinal_consensus_cluster( data = test_data, id_column = \"patient_id\", max_k = 2, reps = 3, model_list = model_list, flexmix_formula = as.formula(\"~s(visit, k = 4) | patient_id\")) #> 2 : * #> 2 : * #> 2 : * cluster_assignments <- get_clusters(clustering, number_clusters = 2) # end not run"},{"path":"https://cellmapslab.github.io/longmixr/reference/longitudinal_consensus_cluster.html","id":null,"dir":"Reference","previous_headings":"","what":"Longitudinal consensus clustering with flexmix — longitudinal_consensus_cluster","title":"Longitudinal consensus clustering with flexmix — longitudinal_consensus_cluster","text":"function performs longitudinal clustering flexmix. get robust results, data subsampled clustering performed subsample. results combined consensus matrix final hierarchical clustering step performed matrix. , follows approach ConsensusClusterPlus package.","code":""},{"path":"https://cellmapslab.github.io/longmixr/reference/longitudinal_consensus_cluster.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Longitudinal consensus clustering with flexmix — longitudinal_consensus_cluster","text":"","code":"longitudinal_consensus_cluster(   data = NULL,   id_column = NULL,   max_k = 3,   reps = 10,   p_item = 0.8,   model_list = NULL,   flexmix_formula = as.formula(\"~s(visit, k = 4) | patient_id\"),   title = \"untitled_consensus_cluster\",   final_linkage = c(\"average\", \"ward.D\", \"ward.D2\", \"single\", \"complete\", \"mcquitty\",     \"median\", \"centroid\"),   seed = 3794,   verbose = FALSE )"},{"path":"https://cellmapslab.github.io/longmixr/reference/longitudinal_consensus_cluster.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Longitudinal consensus clustering with flexmix — longitudinal_consensus_cluster","text":"data data.frame one several observations per subject. needs contain one column specifies subject entry (row) belongs . ID column specified id_column. Otherwise, restrictions column names, model specified flexmix_formula. id_column name (character vector) ID column data identify observations one subject max_k maximum number clusters, default 3 reps number repetitions, default 10 p_item fraction samples contained subsampled sample, default 0.8 model_list either one flexmix driver list flexmix drivers class FLXMR flexmix_formula formula object describes flexmix model relative formula flexmix drivers (dot flexmix drivers replaced, see example). means usually specify right-hand side formula . However, enforced checked give flexibility flexmix interface title name clustering; used writeTable = TRUE final_linkage linkage used last hierarchical clustering step consensus matrix; average, ward.D, ward.D2, single, complete, mcquitty, median centroid. default average seed seed reproducibility verbose boolean status messages displayed. Default FALSE","code":""},{"path":"https://cellmapslab.github.io/longmixr/reference/longitudinal_consensus_cluster.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Longitudinal consensus clustering with flexmix — longitudinal_consensus_cluster","text":"object (list) class lcc length maxk. first entry general_information contains entries: entries correspond number specified clusters (e.g. second entry corresponds 2 specified clusters) contains list following entries:","code":""},{"path":"https://cellmapslab.github.io/longmixr/reference/longitudinal_consensus_cluster.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Longitudinal consensus clustering with flexmix — longitudinal_consensus_cluster","text":"data types longitudinal_consensus_cluster can handle depends flexmix models set , principle data types supported flexmix driver desired outcome variable. follow dimension reduction approach outlined vignette(\"Example clustering analysis\", package = \"longmixr\"), input data types depend FAMD FactoMineR package can handle. FAMD accepts numeric variables treats variables factor variables can handle well.","code":""},{"path":"https://cellmapslab.github.io/longmixr/reference/longitudinal_consensus_cluster.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Longitudinal consensus clustering with flexmix — longitudinal_consensus_cluster","text":"","code":"set.seed(5) test_data <- data.frame(patient_id = rep(1:10, each = 4), visit = rep(1:4, 10), var_1 = c(rnorm(20, -1), rnorm(20, 3)) + rep(seq(from = 0, to = 1.5, length.out = 4), 10), var_2 = c(rnorm(20, 0.5, 1.5), rnorm(20, -2, 0.3)) + rep(seq(from = 1.5, to = 0, length.out = 4), 10)) model_list <- list(flexmix::FLXMRmgcv(as.formula(\"var_1 ~ .\")), flexmix::FLXMRmgcv(as.formula(\"var_2 ~ .\"))) clustering <- longitudinal_consensus_cluster( data = test_data, id_column = \"patient_id\", max_k = 2, reps = 3, model_list = model_list, flexmix_formula = as.formula(\"~s(visit, k = 4) | patient_id\")) #> 2 : * #> 2 : * #> 2 : * # not run # plot(clustering) # end not run"},{"path":"https://cellmapslab.github.io/longmixr/reference/plot.lcc.html","id":null,"dir":"Reference","previous_headings":"","what":"Plot a longitudinal consensus clustering — plot.lcc","title":"Plot a longitudinal consensus clustering — plot.lcc","text":"Plot longitudinal consensus clustering","code":""},{"path":"https://cellmapslab.github.io/longmixr/reference/plot.lcc.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Plot a longitudinal consensus clustering — plot.lcc","text":"","code":"# S3 method for lcc plot(x, color_palette = NULL, ...)"},{"path":"https://cellmapslab.github.io/longmixr/reference/plot.lcc.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plot a longitudinal consensus clustering — plot.lcc","text":"x lcc object (output longitudinal_consensus_cluster) color_palette optional character vector colors consensus matrix ... additional parameters plotting; currently used","code":""},{"path":"https://cellmapslab.github.io/longmixr/reference/plot.lcc.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Plot a longitudinal consensus clustering — plot.lcc","text":"Plots following plots:","code":""},{"path":"https://cellmapslab.github.io/longmixr/reference/test_clustering_methods.html","id":null,"dir":"Reference","previous_headings":"","what":"Try out different linkage methods — test_clustering_methods","title":"Try out different linkage methods — test_clustering_methods","text":"final step, consensus clustering performs hierarchical clustering step consensus cluster. function tries different linkage methods returns corresponding clusterings. outputs can plotted like results longitudinal_consensus_cluster.","code":""},{"path":"https://cellmapslab.github.io/longmixr/reference/test_clustering_methods.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Try out different linkage methods — test_clustering_methods","text":"","code":"test_clustering_methods(   results,   use_methods = c(\"average\", \"ward.D\", \"ward.D2\", \"single\", \"complete\", \"mcquitty\",     \"median\", \"centroid\") )"},{"path":"https://cellmapslab.github.io/longmixr/reference/test_clustering_methods.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Try out different linkage methods — test_clustering_methods","text":"results clustering result class lcc use_methods character vector one several items average, ward.D, ward.D2, single, complete, mcquitty, median centroid","code":""},{"path":"https://cellmapslab.github.io/longmixr/reference/test_clustering_methods.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Try out different linkage methods — test_clustering_methods","text":"list elements, element class lcc. entries named used linkage method.","code":""},{"path":"https://cellmapslab.github.io/longmixr/reference/test_clustering_methods.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Try out different linkage methods — test_clustering_methods","text":"","code":"set.seed(5) test_data <- data.frame(patient_id = rep(1:10, each = 4), visit = rep(1:4, 10), var_1 = c(rnorm(20, -1), rnorm(20, 3)) + rep(seq(from = 0, to = 1.5, length.out = 4), 10), var_2 = c(rnorm(20, 0.5, 1.5), rnorm(20, -2, 0.3)) + rep(seq(from = 1.5, to = 0, length.out = 4), 10)) model_list <- list(flexmix::FLXMRmgcv(as.formula(\"var_1 ~ .\")), flexmix::FLXMRmgcv(as.formula(\"var_2 ~ .\"))) clustering <- longitudinal_consensus_cluster( data = test_data, id_column = \"patient_id\", max_k = 2, reps = 3, model_list = model_list, flexmix_formula = as.formula(\"~s(visit, k = 4) | patient_id\")) #> 2 : * #> 2 : * #> 2 : *  clustering_linkage <- test_clustering_methods(results = clustering, use_methods = c(\"average\", \"single\")) # not run # plot(clustering_linkage[[\"single\"]]) # end not run"},{"path":"https://cellmapslab.github.io/longmixr/news/index.html","id":"longmixr-100","dir":"Changelog","previous_headings":"","what":"longmixr 1.0.0","title":"longmixr 1.0.0","text":"CRAN release: 2022-01-13 first version package (new release).","code":""}]
